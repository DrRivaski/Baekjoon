-- 코드를 작성해주세요
# WITH FRONTEND AS (SELECT SUM(CODE) AS CODE FROM SKILLCODES WHERE UPPER(CATEGORY) = 'FRONT END'),
# PYTHON AS (SELECT CODE FROM SKILLCODES WHERE UPPER(NAME) = 'PYTHON'),
# C_SHARP AS (SELECT CODE FROM SKILLCODES WHERE UPPER(NAME) = 'C#'),
# C_SHARP_DEVELOPERS AS (SELECT 'B' AS GRADE, ID, EMAIL FROM DEVELOPERS D INNER JOIN C_SHARP C ON D.SKILL_CODE & C.CODE > 0),
# FRONTEND_DEVELOPERS AS (SELECT * FROM FRONTEND F INNER JOIN DEVELOPERS D ON D.SKILL_CODE & F.CODE > 0),
# PYTHON_DEVELOPERS AS (SELECT * FROM PYTHON P INNER JOIN DEVELOPERS D ON P.CODE & D.SKILL_CODE > 0),
# FRONTEND_AND_PYTHON_DEVELOPERS_ID AS (SELECT ID FROM PYTHON P INNER JOIN FRONTEND_DEVELOPERS FD ON P.CODE & FD.SKILL_CODE > 0),
# OTHER_FRONTEND_DEVELOPERS_ID AS (SELECT ID FROM FRONTEND_DEVELOPERS WHERE ID NOT IN (SELECT * FROM FRONTEND_AND_PYTHON_DEVELOPERS_ID))
# SELECT * FROM (SELECT 'A' AS GRADE, ID, EMAIL FROM DEVELOPERS WHERE ID IN (SELECT * FROM FRONTEND_AND_PYTHON_DEVELOPERS_ID)
# UNION
# SELECT * FROM C_SHARP_DEVELOPERS
# UNION
# SELECT 'C' AS GRADE, ID, EMAIL FROM DEVELOPERS WHERE ID IN (SELECT * FROM OTHER_FRONTEND_DEVELOPERS_ID)) AS T
# ORDER BY GRADE, ID;


-- SELECT * FROM DEVELOPERS;

-- FRONTEND CODE
WITH FRONTEND AS (SELECT SUM(CODE) AS CODE FROM SKILLCODES WHERE UPPER(CATEGORY) = 'FRONT END'),
PYTHON AS (SELECT CODE FROM SKILLCODES WHERE UPPER(NAME) = 'PYTHON'),
FRONTEND_DEVELOPERS AS (SELECT * FROM DEVELOPERS D INNER JOIN FRONTEND F ON D.SKILL_CODE & F.CODE > 0),
FRONTEND_PYTHON_DEVELOPERS_ID AS (SELECT ID FROM FRONTEND_DEVELOPERS FD INNER JOIN PYTHON P ON FD.SKILL_CODE & P.CODE > 0),
C_SHARP_DEVELOPERS_ID AS (SELECT ID FROM DEVELOPERS D INNER JOIN (SELECT CODE FROM SKILLCODES WHERE UPPER(NAME) = 'C#') C ON D.SKILL_CODE & C.CODE > 0 AND D.ID NOT IN (SELECT * FROM FRONTEND_PYTHON_DEVELOPERS_ID)),
OTHER_FRONTEND_DEVELOPERS_ID AS (SELECT D.ID FROM DEVELOPERS D INNER JOIN FRONTEND F ON D.SKILL_CODE & F.CODE > 0 WHERE D.ID NOT IN (SELECT * FROM FRONTEND_PYTHON_DEVELOPERS_ID) AND D.ID NOT IN (SELECT * FROM C_SHARP_DEVELOPERS_ID))
SELECT * FROM (SELECT 'A' AS GRADE, ID, EMAIL FROM DEVELOPERS D INNER JOIN FRONTEND_PYTHON_DEVELOPERS_ID USING(ID)
UNION
SELECT 'B' AS GRADE, ID, EMAIL FROM DEVELOPERS D INNER JOIN C_SHARP_DEVELOPERS_ID USING(ID)
UNION
SELECT 'C' AS GRADE, ID, EMAIL FROM DEVELOPERS D INNER JOIN OTHER_FRONTEND_DEVELOPERS_ID USING(ID)) AS F
ORDER BY GRADE, ID;